Description: >
    This Cloudformation script will create the servers and all needed components for the Udagram application.

Parameters:

  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  Image:
      Description: The Machine Image to be used
      Type: String
      Default: ami-06d51e91cea0dac8d

  InstanceType:
      Description: WebServer EC2 instance type
      Type: String
      Default: t3.medium

Resources:

  LBSecGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
                
  WebServerSecGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

  WebAppLB:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
        Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
          - Ref: LBSecGroup

  Listener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions: #required
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
        LoadBalancerArn: #required
          Ref: WebAppLB
        Port: '80' #required
        Protocol: HTTP #required

  ALBListenerRule:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
        Actions: #required
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions: #required
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref 'Listener' #required
        Priority: 1 #required
        
  WebAppTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
              - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /

  ProfileWithRolesForApp: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2

  WebAppLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install docker
          apt-get update -y
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          apt-get install -y unzip awscli
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udagram-bucket/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref 'Image'
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: !Ref 'InstanceType'
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebAppGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  AlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm and triger autoscale if CPU > 90% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '180'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebAppGroup
      ComparisonOperator: GreaterThanThreshold
    
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebAppGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  AlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '180'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebAppGroup
      ComparisonOperator: LessThanThreshold  
  
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebAppGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"


Outputs:

  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - WebAppLB
          - DNSName